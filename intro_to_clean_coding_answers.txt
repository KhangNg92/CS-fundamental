1. In my opinion, clean code is code that easy to implement, well organized, and less complicated. The reason why it's important is to keep the code DRY which can avoid unecessary mistakes and for other users can easily implement the code in order to fix it if there are any errors.

2. We could use customers cell phone's plan that can be relied on computer. If the code was not created to an acceptable standard, then consumers select plans, check paying bills, and reviewing pay history documents which could cause them having bad experience with the websites which could make them quit the plans somehow

3.  FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

this can't be a clean code. We can shorten this code.

FUNCTION FarenheitConvertion             
  CALL Farenheit = (Celcius-32) * (5/9) 
  PRINT Farenheit
END FUNCTION

FUNCTION CelciusConvertion
  CALL Celcius = (Farenheit * 1.8000 + 32.00)
  PRINT Celcius
END FUNCTION

4. FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

This is a clean code. It doesn't have to be refactored

5.a. FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactor:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   //We don't need the total amount at the bignning
   IF paymentType = 'CASH' THEN 
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax) // amount paid by cash
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax) //amount paid by credit card
   END IF
END FUNCTION

b. FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

This code is disordered. It needs to be organized

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT guest.hasOverdueBooks AND guest.outstandingFees = 0 THEN // Combine the code by using AND
	 APPEND book to guest.books
         SET book.status to "Checked Out"
         PRINT "Your books have been issued."
 ELSE 
	PRINT "Unable to check out book." 
 END IF
END FUNCTION

c. CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactor: 

FUNCTION checkStatusAndOffer
	IF customer.hasCheckingAccount AND customer.hasCreditCard THEN
	  print balance 
	ELSE if customer.hasCheckingAccount AND NOT customer.hasCreditCard THEN
	CALL offerCreditCard
	ELSE CALL offerCheckingAccount AND offerCreditCard
 // above i combine the credit card offer, create new account for customer, and the status in one function
FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

function square(arr) {
	let sum = 0;
   for (var i = 0; i < arr.length; i++){
	sum += arr[i];
      }
   if (sum > 0 && Math.sqrt(sum) % 1 === 0){
	return Math.sqrt(sum);
   } else {
	return sum;
      }
  square([1,2,3,4,5,6,7]);

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.
function duplicate(arr) {
    for (i = 0; i < arr.length; i++){
	for (j = i +1; j < arr.length; j++){
	  if ( [i] = [j]){
		return true;
		} else {
		return false;
		}
     duplicate([1,2,3,4,5]);




