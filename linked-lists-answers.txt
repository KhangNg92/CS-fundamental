1.
pros :

can be increase/decrease the number of nodes (dynamic allocation)
can use multiple data types as elements
so basically its advanced than arrays.
cons :

consumes more memory than arrays
need to clear memory once we done with it.
handling pointers is a bit tricky compared to arrays.. (but its needed for real time usage)


2. All (most) automobiles in real life are the essentially same thing; an automobile has an Engine, you can start() it, you can make the car go(), stop() and so on. An automobile would typically have a maximum passenger capacity but it would differ between a Bus and a SportsCar, which are both automobiles.

PROGRAMMING QUESTIONS

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   current node = head
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current node to current.next
   SET current.next to node
 }
}


2. 
function LinkedList(){
  this._size = 0;
  this._head = null;
}
LinkedList.prototype.installNode = function(val){
 return {
   data:val,
   next: null
 }
}
LinkedList.prototype.append = function(val){ //push from the back to front 
newNode = this.installNode(val);
if (this._head == null){
  this._head = newNode;
} else {
  current = this._head;
  while(current.next != null){
    current = current.next;
  }
  current.next = newNode;
}
this._size++;

LinkedList.prototype.removeDups = function(){
a1 = this._head;
while(a1 != null){
  a2 = a1;
  while(a2.next != null){
    if (a1.data == a2.next.data){
      a2.next = a2.next.next;
      this._size--;
    } else {
      a2 = a2.next;
    }
  }
    a1 = a1.next;
  }
}
}
khang = new LinkedList();
khang.append(1)
khang.append(2)
khang.append(2)
khang.removeDups();
console.log(khang)



3. 

reverse() {
    
	let current = this.head;
    
	let nextNode = current;
    
	let previous = null


    
while (current) {
      
	nextNode = current.next;
      
	current.next = previous;
      
	previous = current;
      
	current = nextNode;
    }

    
	  this.head = previous;
  }
}
